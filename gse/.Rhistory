## ------------------------------------------------------------------------
# object creation
objScenario <- new("Scenarios")
# Setting the basic scenario's parameters
objScenario <- setParamsBaseScenarios(objScenario,
horizon = 40,
nScenarios = 1000)
# Parameters for BSHW
objScenario <- setRiskParamsScenariosS(objScenario,
vol = .1,
k = .2,
volStock = .2,
stock0 = 100,
rho= .5)
## ------------------------------------------------------------------------
#  Setting the forward rates
objScenario <- setForwardRates(objScenario, ZC = ZC,
horizon = 40)
# Simulation, setting the Paths' slots
objScenario <- customPathsGeneration(objScenario)
y.step <- getstockPaths(objScenario)
## ------------------------------------------------------------------------
# only one function is called, instead of 6
y.interface <- rStock(horizon = 5,
nScenarios = 100,
ZC = ZC,
vol = .1,
k = .2,
volStock = .2,
stock0 = 100,
rho= .5)
## ----, eval = FALSE------------------------------------------------------
## # visualizing the results :
## par(mfrow=c(2, 2))
## matplot(t(y.step$shortRatePaths), type = 'l')
## matplot(t(y.step$stockPaths), type = 'l')
## matplot(t(y.interface$shortRatePaths), type = 'l')
## matplot(t(y.interface$stockPaths), type = 'l')
## ----, echo = FALSE, fig.width=12----------------------------------------
par(mfrow=c(2, 2))
matplot(0:5, t(y.step$shortRatePaths), type = 'l', main = "HW short rate (step by step)",
xlab = "time", ylab = "values")
matplot(0:5, t(y.step$stockPaths), type = 'l', main = "BSHW equity (step by step)",
xlab = "time", ylab = "values")
matplot(0:5, t(y.interface$shortRatePaths), type = 'l', main = "HW short rate (direct)",
xlab = "time", ylab = "values")
matplot(0:5, t(y.interface$stockPaths), type = 'l', main = "BSHW equity (direct)",
xlab = "time", ylab = "values")
## ----, echo = FALSE------------------------------------------------------
calculFlux <- function(scenariosTaux,scenariosUC,txStructurel,txConjoncturel)
{
#Projection des flux
PM <- matrix(data=1,nrow=nrow(scenariosTaux),ncol=ncol(scenariosTaux))
flux <- matrix(data=0,nrow=nrow(scenariosTaux),ncol=ncol(scenariosTaux))
actu <- matrix(data=1,nrow=nrow(scenariosTaux),ncol=ncol(scenariosTaux))
T <- ncol(scenariosTaux)-1
for (t in 1:T)
{
if (t==T)
{
tauxRachat <- 1
}else
{
tauxRachat <- txStructurel+txConjoncturel*(scenariosUC[,t]<1)
}
PM[,t+1] <- PM[,t]*scenariosUC[,t+1]/scenariosUC[,t]
flux[,t+1] <- PM[,t+1]*tauxRachat
PM[,t+1] <- PM[,t+1]-flux[,t+1]
actu[,t+1] <- actu[,t]*exp(-scenariosTaux[,t+1])
}
res <- list()
res[["PM"]] <- PM
res[["flux"]] <- flux
res[["actu"]] <- actu
return(res)
}
## ------------------------------------------------------------------------
k <- 0.12              # short rates' mean-reversion speed
sTaux <- 0.05          # volatility of short rates
sUC <- .16             # volatility of the unit
rho_rS <- .5           # correlation unit vs short rates
H <- 10                # maturity of the contract
nSimulations <- 1000   # number of simulations
tauxRachatS <- .02     # systematic surrender rates
tauxRachatC <- .05     # economic surrender rates
## ------------------------------------------------------------------------
set.seed(10)
# Simulation of the unit and of short rates with rStock
traj <- rStock(horizon=H, nScenarios=nSimulations, ZC=ZC,
vol=sTaux, k=k, volStock=sUC, stock0=1,
rho=rho_rS)
# Short rates
trajectoiresTaux <- traj$shortRatePaths
# Unit (a stock)
trajectoiresUC <- traj$stockPaths
# Future cash-flows and discount factors
Flux_futurs <- calculFlux(trajectoiresTaux,trajectoiresUC,
tauxRachatS,tauxRachatC)
# discounted cash-flows
ActuFlux_futurs <- Flux_futurs$flux*Flux_futurs$actu
## ------------------------------------------------------------------------
# Future distribution of the reserves
Res <- t(apply(Flux_futurs$PM, 2,
function(x) summary(x))[c(-1,-6), ])
rownames(Res) <- paste0("Year ", 0:10)
## ----, echo=FALSE--------------------------------------------------------
Res
Res <- ts(Res, start = 0, end = 10)
## ----, echo=FALSE--------------------------------------------------------
Res.ci <- ts(t(cbind(c(1, 1), apply(Flux_futurs$PM[, -c(1,11)], 2,
function(x) t.test(x)$conf.int), c(0, 0))), start = 0, end = 10)
Res.mean <- apply(Flux_futurs$PM, 2, mean)
plot(0:10, Res.mean , type = 'l',
main = "95% c.i on the projection of reserves", xlab = "time",
ylab = "Reserves", ylim = c(0, 1.4))
polygon(c(0:10, rev(0:10)),
c(Res.ci[ , 2], rev(Res.ci[ , 1])),
col = "lightgreen", border = FALSE)
lines(0:10, Res.mean , lty=2, lwd = 2, col = "blue")
## ------------------------------------------------------------------------
(BestEstimate <- sum(ActuFlux_futurs)/nSimulations)
## ----, echo=FALSE--------------------------------------------------------
## Convergence towards the BEL
# vector containing the means
moyemp <- rep(0, nSimulations)
# calculation of successive means
w <- rep(1, nSimulations)/(1:nSimulations)
temp_moyemp <- apply(ActuFlux_futurs,2,cumsum)*w
moyemp <- apply(temp_moyemp, 1, sum)
# plot
plot(x=(1:nSimulations), y=moyemp,type="l",xlab="Number of simulations",ylab="Best Estimate")
lines(moyemp,col="blue", lwd=2)
titre = paste("Best Estimate liability convergence")
title(titre)
lines(x=(1:nSimulations), y=rep(1, nSimulations), col='red', lwd=2, lty='dashed')
print(paste("Valeur de la moyenne des flux futurs actualis?s par simulation : ", BestEstimate, sep=""))
## Chargement du package
library(ESG)
## Courbe des prix z?ro-coupons
data(ZC)
## 1 - Actions et taux court
simulStock <- rStock(horizon=9, nScenarios=7, ZC=ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5)
par(mfrow=c(2,1))
matplot(t(simulStock$stockPaths), type='l')
matplot(t(simulStock$shortRatePaths), type='l')
## 2 - Taux courts, immo, d?faut, liquidit?
rt <- rShortRate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2)
re <- rRealEstate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volRealEstate=.15, realEstate0=50)
ds <- rDefaultSpread(horizon=40, nScenarios=1000, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
ls <- rLiquiditySpread(horizon=40, nScenarios=1000, eta=.05, liquiditySpread0=.01)
## Chargement du package
library(ESG)
## Courbe des prix z?ro-coupons
data(ZC)
## 1 - Actions et taux court
simulStock <- rStock(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5)
par(mfrow=c(2,1))
matplot(t(simulStock$stockPaths), type='l')
matplot(t(simulStock$shortRatePaths), type='l')
## 2 - Taux courts, immo, d?faut, liquidit?
rt <- rShortRate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2)
re <- rRealEstate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volRealEstate=.15, realEstate0=50)
ds <- rDefaultSpread(horizon=40, nScenarios=1000, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
ls <- rLiquiditySpread(horizon=40, nScenarios=1000, eta=.05, liquiditySpread0=.01)
x11()
par(mfrow=c(2,2))
matplot(t(rt), type='l', xlab = "horizon", ylab = "taux court")
matplot(t(re$realEstatePaths), type='l',  xlab = "horizon", ylab = "immobilier")
matplot(t(ds), type='l', xlab = "horizon", ylab = "spread de d?faut")
matplot(t(ls), type='l', xlab ="horizon", ylab = "spread de liquidit?")
scenarios1 <- new("Scenarios")
scenarios1 <- setParamsBaseScenarios(scenarios1, horizon=40, nScenarios=10000)
scenarios1 <- scenarios1 <- setRiskParamsScenarios(scenarios1, vol=.1, k=2,volStock=.2,
volRealEstate=.15, volDefault=.2, alpha=.1,beta=1, eta=.05,rho=.5, stock0=100,realEstate0=50,
liquiditySpread0=.01, defaultSpread0=.01)
data(ZC)
scenarios1 <- setZCRates(scenarios1, ZC, horizon=40)
getZCRates(scenarios1)
## ----, echo=FALSE--------------------------------------------------------
theta <- 0.02 # long term rate, mean-reversion level
a1 <- 0.25 # speed of mean-reversion 1
a2 <- 0.5 # speed of mean-reversion 2
sigma <- 0.001 #volatility
r0.1 <- 0.03 # starting rate 1
r0.2 <- 0.01 # starting rate 2
n <- 20 # number of projection dates
m <- 2
n <- 500
r3 <- matrix(r0.2, nrow = m, ncol = n)
r4 <- matrix(r0.2, nrow = m, ncol = n)
exp_a <- exp(-a2)
sqrt_2a <- sqrt((1 - exp(-2*a2))/(2*a2))
for (i in 1:(m-1))
{
r3[i+1, ] <- r3[i, ] + a2*(theta - r3[i, ]) + sigma*rnorm(n)
r4[i+1, ] <- exp_a*r3[i, ] + theta*(1  - exp_a) + sigma*rnorm(n)*sqrt_2a
}
plot(density.default(r3[2, ]), type = 'l', col = "blue", ylim = c(0, 550),
main = "Visualizing discretization bias (t = 2) on the example, through densities")
lines(density.default(r4[2, ]), lty = 2, col = "red")
legend("topright", legend = c("Euler simulation","Exact simulation"),
col = c("red", "blue"), pch = 15, bty = "n", pt.cex = 2, cex = 0.8,
text.col = "black", horiz = FALSE, inset = c(0.1, 0.1))
## ----, warning=FALSE, message=FALSE, tidy.opts=list(width.cutoff=60)-----
# loading ESG
library(ESG)
# needed for yield curve interpolation
library(ycinterextra)
# yield to maturities
txZC <- c(0.01422,0.01309,0.01380,0.01549,0.01747,0.01940,
0.02104,0.02236,0.02348,0.02446,0.02535,0.02614,
0.02679,0.02727,0.02760,0.02779,0.02787,0.02786,
0.02776,0.02762,0.02745,0.02727,0.02707,0.02686,
0.02663,0.02640,0.02618,0.02597,0.02578,0.02563)
# maturities
u <- 1:30
# the yield curve must be interpolated on a monthly basis
ZC <- fitted(ycinter(yM = txZC, matsin = u,
matsout = seq(1, 30, by = 1/12),
method = "SW"))
## ------------------------------------------------------------------------
# object creation
objScenario <- new("Scenarios")
# Setting the basic scenario's parameters
objScenario <- setParamsBaseScenarios(objScenario,
horizon = 40,
nScenarios = 1000)
# Parameters for BSHW
objScenario <- setRiskParamsScenariosS(objScenario,
vol = .1,
k = .2,
volStock = .2,
stock0 = 100,
rho= .5)
## ------------------------------------------------------------------------
#  Setting the forward rates
objScenario <- setForwardRates(objScenario, ZC = ZC,
horizon = 40)
# Simulation, setting the Paths' slots
objScenario <- customPathsGeneration(objScenario)
y.step <- getstockPaths(objScenario)
View(y.step)
y.step[["stockPaths"]]
y.step[["shortRatePaths"]]
simulAllRiskFactors <- rAllRisksFactors(horizon=40, nScenarios=1000, ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5, volRealEstate=.15, realEstate0=50, eta=.05, liquiditySpread0=.01, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
par(mfrow=c(2,2))
matplot(t(simulAllRiskFactors$shortRate), type='l', xlab = "horizon", ylab = "taux court")
matplot(t(simulAllRiskFactors$s), type='l', xlab = "horizon", ylab = "spread de d?faut")
matplot(t(simulAllRiskFactors$realEstate), type='l', xlab = "horizon", ylab = "immobilier")
matplot(t(simulAllRiskFactors$defaultSpread), type='l', xlab = "horizon", ylab = "spread de d?faut")
plot(ZC)
## Chargement du package
library(ESG)
# Deux methodes possibles pour générer des scénarios aléatoires :
# Method 1 : "Interface fonctions" Générer manuellement et invididuellement le scenario de chaque type d'actif
# Method 2 : "Interface objet" Creer un objet "scenario" du package esg qui va generer automatiquement un scénario pour tous les types d'actifs.
# Donnees input : Courbe des prix zero-coupons //Je ne sais pas vraiment ce que c'est
# mais il semble que ce soit une courbe taux de zero coupon de maturite espacées d'un an
data(ZC)
plot(ZC)
#######################################################################################
# Method 1 : "Interface fonctions" Générer manuellement et invididuellement le scenario de chaque type d'actif
########################################################################################
## 1 - Actions et taux court
simulStock <- rStock(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5)
par(mfrow=c(2,1))
matplot(t(simulStock$stockPaths), type='l')
matplot(t(simulStock$shortRatePaths), type='l')
## 2 - Taux courts, immo, d?faut, liquidit?
rt <- rShortRate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2)
re <- rRealEstate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volRealEstate=.15, realEstate0=50)
ds <- rDefaultSpread(horizon=40, nScenarios=1000, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
ls <- rLiquiditySpread(horizon=40, nScenarios=1000, eta=.05, liquiditySpread0=.01)
x11()
par(mfrow=c(2,2))
matplot(t(rt), type='l', xlab = "horizon", ylab = "taux court")
matplot(t(re$realEstatePaths), type='l',  xlab = "horizon", ylab = "immobilier")
matplot(t(ds), type='l', xlab = "horizon", ylab = "spread de d?faut")
matplot(t(ls), type='l', xlab ="horizon", ylab = "spread de liquidit?")
## Chargement du package
library(ESG)
# Donnees input : Courbe des prix zero-coupons //Je ne sais pas vraiment ce que c'est
# mais il semble que ce soit une courbe taux de zero coupon de maturite espacées d'un an
data(ZC)
plot(ZC)
simulStock <- rStock(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5)
par(mfrow=c(2,1))
matplot(t(simulStock$stockPaths), type='l')
matplot(t(simulStock$shortRatePaths), type='l')
## Chargement du package
library(ESG)
# Donnees input : Courbe des prix zero-coupons //Je ne sais pas vraiment ce que c'est comme données : pas de doc dessus
data(ZC)
plot(ZC)
simulStock <- rStock(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5)
## Chargement du package
library(ESG)
# Donnees input : Courbe des prix zero-coupons //Je ne sais pas vraiment ce que c'est comme données : pas de doc dessus
data(ZC)
plot(ZC)
simulStock <- rStock(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5)
rt <- rShortRate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2)
re <- rRealEstate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volRealEstate=.15, realEstate0=50)
ds <- rDefaultSpread(horizon=40, nScenarios=1000, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
ls <- rLiquiditySpread(horizon=40, nScenarios=1000, eta=.05, liquiditySpread0=.01)
x11()
par(mfrow=c(3,2))
matplot(t(simulStock$stockPaths), type='l', xlab = "horizon", ylab = "stocks")
matplot(t(rt), type='l', xlab = "horizon", ylab = "taux court")
matplot(t(re$realEstatePaths), type='l',  xlab = "horizon", ylab = "immobilier")
matplot(t(ds), type='l', xlab = "horizon", ylab = "spread de d?faut")
matplot(t(ls), type='l', xlab ="horizon", ylab = "spread de liquidit?")
simulAllRiskFactors <- rAllRisksFactors(horizon=40, nScenarios=1000, ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5, volRealEstate=.15, realEstate0=50, eta=.05, liquiditySpread0=.01, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
par(mfrow=c(2,2))
matplot(t(simulAllRiskFactors$shortRate), type='l', xlab = "horizon", ylab = "taux court")
matplot(t(simulAllRiskFactors$s), type='l', xlab = "horizon", ylab = "spread de d?faut")
matplot(t(simulAllRiskFactors$realEstate), type='l', xlab = "horizon", ylab = "immobilier")
matplot(t(simulAllRiskFactors$defaultSpread), type='l', xlab = "horizon", ylab = "spread de d?faut")
simulAllRiskFactors <- rAllRisksFactors(horizon=40, nScenarios=1000, ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5, volRealEstate=.15, realEstate0=50, eta=.05, liquiditySpread0=.01, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
par(mfrow=c(2,2))
matplot(t(simulAllRiskFactors$shortRate), type='l', xlab = "horizon", ylab = "taux court")
matplot(t(simulAllRiskFactors$s), type='l', xlab = "horizon", ylab = "stocks")
matplot(t(simulAllRiskFactors$realEstate), type='l', xlab = "horizon", ylab = "immobilier")
matplot(t(simulAllRiskFactors$defaultSpread), type='l', xlab = "horizon", ylab = "spread de d?faut")
scenarios1 <- new("Scenarios")
scenarios1 <- setParamsBaseScenarios(scenarios1, horizon=40, nScenarios=10000)
scenarios1 <- scenarios1 <- setRiskParamsScenarios(scenarios1, vol=.1, k=2,volStock=.2,
volRealEstate=.15, volDefault=.2, alpha=.1,beta=1, eta=.05,rho=.5, stock0=100,realEstate0=50,
liquiditySpread0=.01, defaultSpread0=.01)
data(ZC)
scenarios1 <- setZCRates(scenarios1, ZC, horizon=40)
getZCRates(scenarios1)
scenarios1 <- new("Scenarios")
scenarios1 <- setParamsBaseScenarios(scenarios1, horizon=40, nScenarios=10000)
scenarios1 <- scenarios1 <- setRiskParamsScenarios(scenarios1, vol=.1, k=2,volStock=.2,
volRealEstate=.15, volDefault=.2, alpha=.1,beta=1, eta=.05,rho=.5, stock0=100,realEstate0=50,
liquiditySpread0=.01, defaultSpread0=.01)
data(ZC)
scenarios1 <- setZCRates(scenarios1, ZC, horizon=40)
getZCRates(scenarios1)
getrealEstatePaths(scenarios1)
rt
simulStock$stockPaths
## Chargement du package
library(ESG)
# Donnees input : Courbe des prix zero-coupons //Je ne sais pas vraiment ce que c'est comme données : pas de doc dessus
data(ZC)
plot(ZC)
simulStock <- rStock(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5)
rt <- rShortRate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2)
re <- rRealEstate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volRealEstate=.15, realEstate0=50)
ds <- rDefaultSpread(horizon=40, nScenarios=1000, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
ls <- rLiquiditySpread(horizon=40, nScenarios=1000, eta=.05, liquiditySpread0=.01)
par(mfrow=c(3,2))
matplot(t(simulStock$stockPaths), type='l', xlab = "horizon", ylab = "action")
matplot(t(rt), type='l', xlab = "horizon", ylab = "taux court")
matplot(t(re$realEstatePaths), type='l',  xlab = "horizon", ylab = "immobilier")
matplot(t(ds), type='l', xlab = "horizon", ylab = "spread de d?faut")
matplot(t(ls), type='l', xlab ="horizon", ylab = "spread de liquidit?")
## Chargement du package
# Deux methodes possibles pour générer des scénarios aléatoires :
# Method 1 : "Interface fonctions" Générer manuellement et invididuellement le scenario de chaque type d'actif
# Method 2 : "Interface objet" Creer un objet "scenario" du package esg qui va generer automatiquement un scénario pour tous les types d'actifs.
library(ESG)
# Donnees input : Courbe des prix zero-coupons //Je ne sais pas vraiment ce que c'est comme données : pas de doc dessus
data(ZC)
plot(ZC)
#######################################################################################
# Method 1 : "Interface fonctions" Générer manuellement et invididuellement le scenario de chaque type d'actif
########################################################################################
## 1 - Actions et taux court
simulStock <- rStock(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5)
## 2 - Taux courts, immo, d?faut, liquidit?
rt <- rShortRate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2)
re <- rRealEstate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volRealEstate=.15, realEstate0=50)
ds <- rDefaultSpread(horizon=40, nScenarios=1000, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
ls <- rLiquiditySpread(horizon=40, nScenarios=1000, eta=.05, liquiditySpread0=.01)
par(mfrow=c(3,2))
matplot(t(simulStock$stockPaths), type='l', xlab = "horizon", ylab = "action")
matplot(t(rt), type='l', xlab = "horizon", ylab = "taux court")
matplot(t(re$realEstatePaths), type='l',  xlab = "horizon", ylab = "immobilier")
matplot(t(ds), type='l', xlab = "horizon", ylab = "spread de d?faut")
matplot(t(ls), type='l', xlab ="horizon", ylab = "spread de liquidit?")
# Ecriture des fichiers csv
write.csv(x = rt, file = "esg_shortrate.csv", sep = ";", col.names = NA, row.names = FALSE)
write.csv(x = simulStock$stockPaths, file = "esg_stock.csv", sep = ";", col.names = NA, row.names = FALSE)
write.csv(x = re$realEstatePaths, file = "esg_realestate.csv", sep = ";", col.names = NA, row.names = FALSE)
write.csv(x = ds, file = "esg_defaultspread.csv", sep = ";", col.names = NA, row.names = FALSE)
write.csv(x = ls, file = "esg_liquidityspread.csv", sep = ";", col.names = NA, row.names = FALSE)
setwd("~/OneDrive/Modele_ALM/gse")
## Chargement du package
# Deux methodes possibles pour générer des scénarios aléatoires :
# Method 1 : "Interface fonctions" Générer manuellement et invididuellement le scenario de chaque type d'actif
# Method 2 : "Interface objet" Creer un objet "scenario" du package esg qui va generer automatiquement un scénario pour tous les types d'actifs.
library(ESG)
# Donnees input : Courbe des prix zero-coupons //Je ne sais pas vraiment ce que c'est comme données : pas de doc dessus
data(ZC)
plot(ZC)
#######################################################################################
# Method 1 : "Interface fonctions" Générer manuellement et invididuellement le scenario de chaque type d'actif
########################################################################################
## 1 - Actions et taux court
simulStock <- rStock(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5)
## 2 - Taux courts, immo, d?faut, liquidit?
rt <- rShortRate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2)
re <- rRealEstate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volRealEstate=.15, realEstate0=50)
ds <- rDefaultSpread(horizon=40, nScenarios=1000, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
ls <- rLiquiditySpread(horizon=40, nScenarios=1000, eta=.05, liquiditySpread0=.01)
par(mfrow=c(3,2))
matplot(t(simulStock$stockPaths), type='l', xlab = "horizon", ylab = "action")
matplot(t(rt), type='l', xlab = "horizon", ylab = "taux court")
matplot(t(re$realEstatePaths), type='l',  xlab = "horizon", ylab = "immobilier")
matplot(t(ds), type='l', xlab = "horizon", ylab = "spread de d?faut")
matplot(t(ls), type='l', xlab ="horizon", ylab = "spread de liquidit?")
# Ecriture des fichiers csv
write.csv(x = rt, file = "esg_shortrate.csv", sep = ";", col.names = NA, row.names = FALSE)
write.csv(x = simulStock$stockPaths, file = "esg_stock.csv", sep = ";", col.names = NA, row.names = FALSE)
write.csv(x = re$realEstatePaths, file = "esg_realestate.csv", sep = ";", col.names = NA, row.names = FALSE)
write.csv(x = ds, file = "esg_defaultspread.csv", sep = ";", col.names = NA, row.names = FALSE)
write.csv(x = ls, file = "esg_liquidityspread.csv", sep = ";", col.names = NA, row.names = FALSE)
## 3 - Tous les facteurs de risque, sur un m?me horizon en une seule fois avec la fonction rAllRisksFactors
simulAllRiskFactors <- rAllRisksFactors(horizon=40, nScenarios=1000, ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5, volRealEstate=.15, realEstate0=50, eta=.05, liquiditySpread0=.01, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
par(mfrow=c(2,2))
matplot(t(simulAllRiskFactors$shortRate), type='l', xlab = "horizon", ylab = "taux court")
matplot(t(simulAllRiskFactors$s), type='l', xlab = "horizon", ylab = "stocks")
matplot(t(simulAllRiskFactors$realEstate), type='l', xlab = "horizon", ylab = "immobilier")
matplot(t(simulAllRiskFactors$defaultSpread), type='l', xlab = "horizon", ylab = "spread de d?faut")
#############################################################################################
# Method 2 : "Interface objet" Creer un objet "scenario" du package esg qui va generer automatiquement
# un scénario pour tous les types d'actifs. (mais je ne sais pas comment cela s'utilise)
#############################################################################################
scenarios1 <- new("Scenarios")
scenarios1 <- setParamsBaseScenarios(scenarios1, horizon=40, nScenarios=10000)
scenarios1 <- scenarios1 <- setRiskParamsScenarios(scenarios1, vol=.1, k=2,volStock=.2,
volRealEstate=.15, volDefault=.2, alpha=.1,beta=1, eta=.05,rho=.5, stock0=100,realEstate0=50,
liquiditySpread0=.01, defaultSpread0=.01)
data(ZC)
scenarios1 <- setZCRates(scenarios1, ZC, horizon=40)
#getZCRates(scenarios1)
#getrealEstatePaths(scenarios1)
write.csv2(x = rt, file = "esg_shortrate.csv", sep = ";", col.names = NA, row.names = FALSE)
View(rt)
type(rt)
# Ecriture des fichiers csv
write.table(x = rt, file = "esg_shortrate.csv", sep = ";", col.names = NA, row.names = FALSE)
# Ecriture des fichiers csv
write.table(x = rt, file = "esg_shortrate.csv", sep = ";", row.names = FALSE)
# Ecriture des fichiers csv
write.csv(x = rt, file = "esg_shortrate.csv", sep = ";", row.names = FALSE)
# Ecriture des fichiers csv
write.table(x = rt, file = "esg_shortrate.csv", sep = ";", row.names = FALSE, col.names = FALSE)
# Ecriture des fichiers csv
write.table(x = rt, file = "esg_shortrate.csv", sep = ";", row.names = FALSE, col.names = FALSE)
write.table(x = simulStock$stockPaths, file = "esg_stock.csv", sep = ";", row.names = FALSE, col.names = FALSE)
write.table(x = re$realEstatePaths, file = "esg_realestate.csv", sep = ";", row.names = FALSE, col.names = FALSE)
write.table(x = ds, file = "esg_defaultspread.csv", sep = ";", row.names = FALSE, col.names = FALSE)
write.table(x = ls, file = "esg_liquidityspread.csv", sep = ";", row.names = FALSE, col.names = FALSE)
## Chargement du package
# Deux methodes possibles pour générer des scénarios aléatoires :
# Method 1 : "Interface fonctions" Générer manuellement et invididuellement le scenario de chaque type d'actif
# Method 2 : "Interface objet" Creer un objet "scenario" du package esg qui va generer automatiquement un scénario pour tous les types d'actifs.
library(ESG)
# Donnees input : Courbe des prix zero-coupons //Je ne sais pas vraiment ce que c'est comme données : pas de doc dessus
data(ZC)
plot(ZC)
#######################################################################################
# Method 1 : "Interface fonctions" Générer manuellement et invididuellement le scenario de chaque type d'actif
########################################################################################
## 1 - Actions et taux court
simulStock <- rStock(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5)
## 2 - Taux courts, immo, d?faut, liquidit?
rt <- rShortRate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2)
re <- rRealEstate(horizon=40, nScenarios=1000, ZC=ZC, vol=.1, k=2, volRealEstate=.15, realEstate0=50)
ds <- rDefaultSpread(horizon=40, nScenarios=1000, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
ls <- rLiquiditySpread(horizon=40, nScenarios=1000, eta=.05, liquiditySpread0=.01)
par(mfrow=c(3,2))
matplot(t(simulStock$stockPaths), type='l', xlab = "horizon", ylab = "action")
matplot(t(rt), type='l', xlab = "horizon", ylab = "taux court")
matplot(t(re$realEstatePaths), type='l',  xlab = "horizon", ylab = "immobilier")
matplot(t(ds), type='l', xlab = "horizon", ylab = "spread de d?faut")
matplot(t(ls), type='l', xlab ="horizon", ylab = "spread de liquidit?")
# Ecriture des fichiers csv
write.table(x = rt, file = "esg_shortrate.csv", sep = ";", row.names = FALSE, col.names = FALSE)
write.table(x = simulStock$stockPaths, file = "esg_stock.csv", sep = ";", row.names = FALSE, col.names = FALSE)
write.table(x = re$realEstatePaths, file = "esg_realestate.csv", sep = ";", row.names = FALSE, col.names = FALSE)
write.table(x = ds, file = "esg_defaultspread.csv", sep = ";", row.names = FALSE, col.names = FALSE)
write.table(x = ls, file = "esg_liquidityspread.csv", sep = ";", row.names = FALSE, col.names = FALSE)
## 3 - Tous les facteurs de risque, sur un m?me horizon en une seule fois avec la fonction rAllRisksFactors
simulAllRiskFactors <- rAllRisksFactors(horizon=40, nScenarios=1000, ZC, vol=.1, k=2, volStock=.2, stock0=100, rho=.5, volRealEstate=.15, realEstate0=50, eta=.05, liquiditySpread0=.01, defaultSpread0=.01, volDefault=.2, alpha=.1, beta=1)
par(mfrow=c(2,2))
matplot(t(simulAllRiskFactors$shortRate), type='l', xlab = "horizon", ylab = "taux court")
matplot(t(simulAllRiskFactors$s), type='l', xlab = "horizon", ylab = "stocks")
matplot(t(simulAllRiskFactors$realEstate), type='l', xlab = "horizon", ylab = "immobilier")
matplot(t(simulAllRiskFactors$defaultSpread), type='l', xlab = "horizon", ylab = "spread de d?faut")
#############################################################################################
# Method 2 : "Interface objet" Creer un objet "scenario" du package esg qui va generer automatiquement
# un scénario pour tous les types d'actifs. (mais je ne sais pas comment cela s'utilise)
#############################################################################################
scenarios1 <- new("Scenarios")
scenarios1 <- setParamsBaseScenarios(scenarios1, horizon=40, nScenarios=10000)
scenarios1 <- scenarios1 <- setRiskParamsScenarios(scenarios1, vol=.1, k=2,volStock=.2,
volRealEstate=.15, volDefault=.2, alpha=.1,beta=1, eta=.05,rho=.5, stock0=100,realEstate0=50,
liquiditySpread0=.01, defaultSpread0=.01)
data(ZC)
scenarios1 <- setZCRates(scenarios1, ZC, horizon=40)
#getZCRates(scenarios1)
#getrealEstatePaths(scenarios1)
write.table(x = rt, file = "/gse_outputs/esg_shortrate.csv", sep = ";", row.names = FALSE, col.names = FALSE)
write.table(x = rt, file = "gse_outputs/esg_shortrate.csv", sep = ";", row.names = FALSE, col.names = FALSE)
write.table(x = ZC, file = "gse_inputs/ZC.csv", sep = ";", row.names = FALSE, col.names = FALSE)
ZC
plot(ZC)
